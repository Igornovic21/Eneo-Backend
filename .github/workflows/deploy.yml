name: Django CI/CD with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for full analysis history

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with Flake8
        run: flake8 . --count --exit-zero --exclude=docs,.git,__pycache__,venv,build,dist

      - name: Set up Java (for SonarScanner)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "${PWD}/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_ACCOUNT_KEY }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.python.version=3.12 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_ACCOUNT_KEY }}

      - name: Check SonarCloud Quality Gate
        id: quality_gate
        run: |
          sleep 15  # Laisse le temps au Quality Gate de se mettre à jour
          STATUS=$(curl -s -u "${{ secrets.SONAR_ACCOUNT_KEY }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" \
            | jq -r .projectStatus.status)
          echo "Quality Gate Status: $STATUS"
          echo "status=$STATUS" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ needs.build_and_test.outputs.quality_gate.status == 'OK' || github.event_name == 'push' }} # déploie même si Quality Gate échoue
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        shell: bash

      - name: Docker Login
        run: echo "No login required (public Docker Hub used)"

      - name: Deploy to VPS via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ secrets.REMOTE_SERVER_PATH }}
            git pull origin main
            docker compose down
            docker compose up --build -d
          EOF
